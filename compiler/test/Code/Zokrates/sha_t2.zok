import "EMBED/u32_to_bits" as to_bits
import "EMBED/u32_from_bits" as from_bits

def right_rotate_2(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[30..], ...b[..30]])

def right_rotate_6(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[26..], ...b[..26]])

def right_rotate_7(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[25..], ...b[..25]])

def right_rotate_11(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[21..], ...b[..21]])

def right_rotate_13(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[19..], ...b[..19]])

def right_rotate_17(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[15..], ...b[..15]])

def right_rotate_18(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[14..], ...b[..14]])

def right_rotate_19(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[13..], ...b[..13]])

def right_rotate_22(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[10..], ...b[..10]])

def right_rotate_25(u32 e) -> u32:
	bool[32] b = to_bits(e)
	return from_bits([...b[7..], ...b[..7]])

def extend(u32[64] w, field i) -> u32:
	u32 s0 = right_rotate_7(w[i-15]) ^ right_rotate_18(w[i-15]) ^ (w[i-15] >> 3)
    u32 s1 = right_rotate_17(w[i-2]) ^ right_rotate_19(w[i-2]) ^ (w[i-2] >> 10)
    return w[i-16] + s0 + w[i-7] + s1

def temp1(u32 e, u32 f, u32 g, u32 h, u32 k, u32 w) -> u32:
	// ch := (e and f) xor ((not e) and g)
	u32 ch = (e & f) ^ ((!e) & g)

	// S1 := (e rightrotate 6) xor (e rightrotate 11) xor (e rightrotate 25)
	u32 S1 = right_rotate_6(e) ^ right_rotate_11(e) ^ right_rotate_25(e)
	
	// temp1 := h + S1 + ch + k + w
	return h + S1 + ch + k + w

def main(u32 a, u32 b, u32 c) -> u32:
	// maj := (a and b) xor (a and c) xor (b and c)
    u32 maj = (a & b) ^ (a & c) ^ (b & c)

	// S0 := (a rightrotate 2) xor (a rightrotate 13) xor (a rightrotate 22)
	u32 S0 = right_rotate_2(a) ^ right_rotate_13(a) ^ right_rotate_22(a)

    // temp2 := S0 + maj
    return S0 + maj
